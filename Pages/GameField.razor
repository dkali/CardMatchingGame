@page "/game"
@using CardMatchingGame.Data;
@inject GameStateService GameState
@inject DialogService DialogService
@inject NavigationManager NavManager

<RadzenStack Orientation=@Orientation.Vertical Gap="10px" JustifyContent=@JustifyContent.Center AlignItems=@AlignItems.Center>
    @for (int rowInd = 0; rowInd < GameState.Rows; rowInd++)
    {
        <RadzenRow JustifyContent=@JustifyContent.Center AlignItems=@AlignItems.Center Gap="1rem">
            @for (int colInd = 0; colInd < GameState.Columns; colInd++)
            {
                @* @GameState.ImageIds[_imageIndex++] *@
                <ImageCard ImageId=@(GameState.ImageIds[_imageIndex++]) GameStateChanged="@GameStateChanged" CardOpen=@_openCards.Contains(GameState.ImageIds[_imageIndex-1]) />
            }
        </RadzenRow>
    }
</RadzenStack>

@code {
    private int _imageIndex = 0;
    private int _lastClickedId = 0;
    private List<int> _openCards = new List<int>();

    protected override void OnAfterRender(bool firstRender)
    {
        _imageIndex = 0;
    }

    private void GameStateChanged(int clickedImageId)
    {
        if (_lastClickedId == 0)
        {
            _lastClickedId = clickedImageId;
        }
        else
        {
            if (_lastClickedId == clickedImageId)
            {
                _openCards.Add(clickedImageId);
                if (GameState.UniqueImageNum == _openCards.Count())
                {
                    // game ended;
                    var result = DialogService.OpenAsync(":)", ds =>
                        @<RadzenStack Gap="1.5rem">
                            <p>Congratulations, you won!</p>
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenButton Text="Play Again" Click="(() => { StartAgain(); })" ButtonStyle="ButtonStyle.Primary" />
                            </RadzenStack>
                        </RadzenStack>);
                }
            }
            else
            {
                // flip cards back
                FlipCardsBack();
            }
            _lastClickedId = 0;
        }
    }

    private async Task FlipCardsBack()
    {
        Thread.Sleep(1 * 1000);
        StateHasChanged();
    }

    private void StartAgain()
    {
        NavManager.NavigateTo("/");
    }
}