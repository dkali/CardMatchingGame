@using CardMatchingGame.Data;
@inject GameStateService GameState

<Animation Effect="@Effect.FlipInX" Speed="@Speed.Faster" Delay="@Delay.None" IterationCount="1" Enabled=@_animationFlipEnabled>
@if (CardOpen)
{
    <RadzenImage
        Path=@($"https://picsum.photos/id/{ImageId}/200/300")
        Style="width: 10rem;"
        class="rz-shadow-4"/>
}
else
{
    <Animation Effect="@Effect.FlipOutX" Speed="@Speed.Faster" Delay="@Delay.None" IterationCount="1" Enabled=@_animationFlipOutXEnabled OnAnimationEnd="FlipOutXAnimationEnd">
        <RadzenImage
            Path="tile.png"
            Style="width: 10rem;"
            Click=@(args => OnClick())
            class="rz-shadow-4"/>
    </Animation>
}
</Animation>

@code {
    [Parameter]
    public int ImageId { get; set; }
    [Parameter]
    public Action<int> GameStateChanged { get; set; }
    [Parameter]
    public bool CardOpen {get; set; } = false;
    private bool _animationFlipEnabled = true;
    private bool _animationFlipOutXEnabled = false;
    private void OnClick()
    {
        _animationFlipOutXEnabled = true;
    }
    private void FlipOutXAnimationEnd()
    {
       CardOpen = true;
       _animationFlipEnabled = true;
       StateHasChanged();
       GameStateChanged(ImageId);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _animationFlipEnabled = false;
        _animationFlipOutXEnabled = false;
    }
}